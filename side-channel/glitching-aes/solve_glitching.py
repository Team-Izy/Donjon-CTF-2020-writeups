#!/usr/bin/python3
import numpy as np
from matplotlib import pyplot as plt

Sbox = (
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
            )

def xor(L1, L2):
    return [ a^b for a,b in zip(L1, L2) ]
RCON = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
SR = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]
m2 = [
      0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0x14,0x16,0x18,0x1A,0x1C,0x1E,
      0x20,0x22,0x24,0x26,0x28,0x2A,0x2C,0x2E,0x30,0x32,0x34,0x36,0x38,0x3A,0x3C,0x3E,
      0x40,0x42,0x44,0x46,0x48,0x4A,0x4C,0x4E,0x50,0x52,0x54,0x56,0x58,0x5A,0x5C,0x5E,
      0x60,0x62,0x64,0x66,0x68,0x6A,0x6C,0x6E,0x70,0x72,0x74,0x76,0x78,0x7A,0x7C,0x7E,
      0x80,0x82,0x84,0x86,0x88,0x8A,0x8C,0x8E,0x90,0x92,0x94,0x96,0x98,0x9A,0x9C,0x9E,
      0xA0,0xA2,0xA4,0xA6,0xA8,0xAA,0xAC,0xAE,0xB0,0xB2,0xB4,0xB6,0xB8,0xBA,0xBC,0xBE,
      0xC0,0xC2,0xC4,0xC6,0xC8,0xCA,0xCC,0xCE,0xD0,0xD2,0xD4,0xD6,0xD8,0xDA,0xDC,0xDE,
      0xE0,0xE2,0xE4,0xE6,0xE8,0xEA,0xEC,0xEE,0xF0,0xF2,0xF4,0xF6,0xF8,0xFA,0xFC,0xFE,
      0x1B,0x19,0x1F,0x1D,0x13,0x11,0x17,0x15,0x0B,0x09,0x0F,0x0D,0x03,0x01,0x07,0x05,
      0x3B,0x39,0x3F,0x3D,0x33,0x31,0x37,0x35,0x2B,0x29,0x2F,0x2D,0x23,0x21,0x27,0x25,
      0x5B,0x59,0x5F,0x5D,0x53,0x51,0x57,0x55,0x4B,0x49,0x4F,0x4D,0x43,0x41,0x47,0x45,
      0x7B,0x79,0x7F,0x7D,0x73,0x71,0x77,0x75,0x6B,0x69,0x6F,0x6D,0x63,0x61,0x67,0x65,
      0x9B,0x99,0x9F,0x9D,0x93,0x91,0x97,0x95,0x8B,0x89,0x8F,0x8D,0x83,0x81,0x87,0x85,
      0xBB,0xB9,0xBF,0xBD,0xB3,0xB1,0xB7,0xB5,0xAB,0xA9,0xAF,0xAD,0xA3,0xA1,0xA7,0xA5,
      0xDB,0xD9,0xDF,0xDD,0xD3,0xD1,0xD7,0xD5,0xCB,0xC9,0xCF,0xCD,0xC3,0xC1,0xC7,0xC5,
      0xFB,0xF9,0xFF,0xFD,0xF3,0xF1,0xF7,0xF5,0xEB,0xE9,0xEF,0xED,0xE3,0xE1,0xE7,0xE5
    ]

m3 = [
      0x00,0x03,0x06,0x05,0x0C,0x0F,0x0A,0x09,0x18,0x1B,0x1E,0x1D,0x14,0x17,0x12,0x11,
      0x30,0x33,0x36,0x35,0x3C,0x3F,0x3A,0x39,0x28,0x2B,0x2E,0x2D,0x24,0x27,0x22,0x21,
      0x60,0x63,0x66,0x65,0x6C,0x6F,0x6A,0x69,0x78,0x7B,0x7E,0x7D,0x74,0x77,0x72,0x71,
      0x50,0x53,0x56,0x55,0x5C,0x5F,0x5A,0x59,0x48,0x4B,0x4E,0x4D,0x44,0x47,0x42,0x41,
      0xC0,0xC3,0xC6,0xC5,0xCC,0xCF,0xCA,0xC9,0xD8,0xDB,0xDE,0xDD,0xD4,0xD7,0xD2,0xD1,
      0xF0,0xF3,0xF6,0xF5,0xFC,0xFF,0xFA,0xF9,0xE8,0xEB,0xEE,0xED,0xE4,0xE7,0xE2,0xE1,
      0xA0,0xA3,0xA6,0xA5,0xAC,0xAF,0xAA,0xA9,0xB8,0xBB,0xBE,0xBD,0xB4,0xB7,0xB2,0xB1,
      0x90,0x93,0x96,0x95,0x9C,0x9F,0x9A,0x99,0x88,0x8B,0x8E,0x8D,0x84,0x87,0x82,0x81,
      0x9B,0x98,0x9D,0x9E,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8F,0x8C,0x89,0x8A,
      0xAB,0xA8,0xAD,0xAE,0xA7,0xA4,0xA1,0xA2,0xB3,0xB0,0xB5,0xB6,0xBF,0xBC,0xB9,0xBA,
      0xFB,0xF8,0xFD,0xFE,0xF7,0xF4,0xF1,0xF2,0xE3,0xE0,0xE5,0xE6,0xEF,0xEC,0xE9,0xEA,
      0xCB,0xC8,0xCD,0xCE,0xC7,0xC4,0xC1,0xC2,0xD3,0xD0,0xD5,0xD6,0xDF,0xDC,0xD9,0xDA,
      0x5B,0x58,0x5D,0x5E,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4F,0x4C,0x49,0x4A,
      0x6B,0x68,0x6D,0x6E,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7F,0x7C,0x79,0x7A,
      0x3B,0x38,0x3D,0x3E,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2F,0x2C,0x29,0x2A,
      0x0B,0x08,0x0D,0x0E,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1F,0x1C,0x19,0x1A
    ]
def MC(col):
        a, b, c, d = col
        return [
            m2[a] ^ m3[b] ^ c ^ d,
            m2[b] ^ m3[c] ^ d ^ a,
            m2[c] ^ m3[d] ^ a ^ b,
            m2[d] ^ m3[a] ^ b ^ c,
        ]

def MixColumns(state):
    return sum([MC(state[4*i:4*i+4]) for i in range(4)], [])

def ShiftRows(state):
    return [ state[SR[i]] for i in range(16) ]

def inverse_expandKey(k10):
    subKeys = [k10]
    for i in range(9, -1, -1):
        curr = subKeys[0]
        prev = []
        prev += xor(curr[ 0: 4], curr[4: 8])
        prev += xor(curr[ 4: 8], curr[8: 12])
        prev += xor(curr[ 8: 12], curr[12: 16])
        a, b, c, d = prev[-4:]
        t = [ Sbox[b]^RCON[i+1], Sbox[c], Sbox[d], Sbox[a] ]
        prev = xor(curr[ 0: 4], t) + prev
        subKeys = [prev] + subKeys
    assert expandKey(subKeys[0]) == subKeys
    return subKeys
from itertools import combinations, product
def convert():
    i = 0
    with open("./campaign_results.txt") as f:
        plaintexts = list()
        ciphertexts = list()
        values = list()
        pt_txt_prev = ""
        i = 0
        for line in f:
            print(str(i*100//(2560*1625)).zfill(3)+"%", end='\r')
            i+=1
            pt_txt, time_txt, power_txt, _, result = eval(line)
            if pt_txt != pt_txt_prev:
                pt_txt_prev = pt_txt
                pt_arr = pt_txt.split("[")[1].split("]")[0].strip().split(" ")
                pt = [int(s) for s in pt_arr if s != ""]
                plaintexts.append(pt)
                values.append(list())
            power = float(power_txt.split(": ")[1])
            success = result != 'NO ANSWER'
            if success:
                ct = result
                if len(ciphertexts) == len(plaintexts):
                    assert ct == ciphertexts[-1]
                else:
                    ciphertexts.append(ct)
            values[-1].append((success, power))
    np.save("plaintexts.npy", np.array(plaintexts))
    np.save("ciphertexts.npy", np.array(ciphertexts))
    np.save("values.npy", np.array(values, dtype=[("success", np.bool), ("power", np.float32)]))

import os.path
def load_data(limit=None):
    if not os.path.exists("plaintexts.npy"):
        print("Generating npy files, please wait a minute (only this time) ...")
        convert()
        print("Done")
    plaintexts = np.load("plaintexts.npy")
    ciphertexts = np.load("ciphertexts.npy")
    values = np.load("values.npy")
    if limit is not None:
        plaintexts = plaintexts[:limit]
        values = values[:limit]
        ciphertexts = ciphertexts[:limit]
    return plaintexts, values, ciphertexts



def get_irrelevant_times_for_crashes():
    power_is_between_1_and_3 = (power <= 3.0) & (1.0 <= power)
    crash_proba =  np.sum(~success, axis=0, where=power_is_between_1_and_3) / np.sum(np.ones_like(success), axis=0, where=power_is_between_1_and_3)
    plt.plot(crash_proba)
    plt.show()
    irrelevant_times = np.append(np.where(crash_proba==0.0), np.where(crash_proba==1.0))
    return irrelevant_times


def search_non_uniform_distribution():
    power_between_1_and_2 = (1.0 <= power) & (power <= 2.0)
    power_between_1_and_3 = (1.0 <= power) & (power <= 3.0)
    power_between_2_and_3 = (2.0 <= power) & (power <= 3.0)
    power_between_1_and_3_t = power_between_1_and_3.transpose()
    success_t = success.transpose()
    power_t = power.transpose()
    plaintexts_byte1 = plaintexts.transpose()[4] # arbitrary : we look for the influence of plaintext[4] on crashes
    for t in range(10): #arbitrary : we assume plaintext[4] is used at the start
        power_at_t = power_t[t]
        glitch_power_success = power_at_t[success_t[t] & power_between_1_and_3_t[t]]
        involved_byte_success = plaintexts_byte1[success_t[t] & power_between_1_and_3_t[t]]
        glitch_power_crash = power_at_t[~success_t[t] & power_between_1_and_3_t[t]]
        involved_byte_crash = plaintexts_byte1[~success_t[t] & power_between_1_and_3_t[t]]
        plt.scatter(involved_byte_success, glitch_power_success)
        plt.scatter(involved_byte_crash, glitch_power_crash)
        plt.show()

def get_k0(irrelevant_t, K0_known=None):
    scores = list()
    ciphertexts_t = ciphertexts.transpose()
    plaintexts_t = plaintexts.transpose()
    if K0_known is not None:
        state_0 = list()
        for pt in plaintexts:
            state = pt
            state = xor(state, K0_known)
            state = [Sbox[x] for x in state]
            state = ShiftRows(state)
            state = MixColumns(state)
            state_0.append(state)
        states_t = np.array(state_0).transpose()
    else:
        states_t = plaintexts_t
    success_t = success.transpose()
    power_between_1_and_2 = (1.0 <= power) & (power <= 2.0)
    power_between_1_and_2_t = power_between_1_and_2.transpose()
    power_between_2_and_3 = (2.0 <= power) & (power <= 3.0)
    power_between_2_and_3_t = power_between_2_and_3.transpose()
    K0 = list()
    K0_scores = list()
    for j in range(16):
        best_Kg = -1
        best_Kg_score = 0.0
        for Kg in range(256):
            tested_byte = np.array([Sbox[pj ^ Kg] for pj in states_t[j]])
            for bits76,bit3 in product(range(4), range(2)):
                bits_76_match = (tested_byte & 0b11000000)==bits76<<6
                bit_3_match = (tested_byte & 0b00001000)==bit3<<3
                power_and_bits_76_match = power_between_2_and_3_t & bits_76_match
                non_crash_and_power_and_bits_76_match = power_and_bits_76_match & success_t
                power_and_bit_3_match = power_between_1_and_2_t & bit_3_match
                non_crash_and_power_and_bit_3_match = power_and_bit_3_match & success_t
                scores = non_crash_and_power_and_bits_76_match.sum(1) + non_crash_and_power_and_bit_3_match.sum(1)
                total = power_and_bits_76_match.sum(1) + power_and_bit_3_match.sum(1)
                for t in irrelevant_t:
                    scores[t] = 0
                Kg_score = np.max(scores / total)
                for t,s in enumerate(scores / total):
                    if s>0.9:
                        print("j={},Kg={},t={},s={}".format(j,Kg,t,s))
                if Kg_score > best_Kg_score:
                    best_Kg_score = Kg_score
                    best_Kg = Kg
                    if Kg_score == 1.0: #no need to continue searching, triggers the "break" bellow
                        break
            else:
                continue
            break #triggered if Kg_score == 1.0 found
        K0.append(best_Kg)
        print(K0)
    return K0

plaintexts, values, ciphertexts = load_data(256) #actually, it works with only 256 sets of plaintexts/ciphertexts, not the whole 2560
power = values["power"]
success = values["success"]
duration = len(power[0])
nb_pt = len(plaintexts)

if __name__ == "__main__":
    irrelevant_t = get_irrelevant_times_for_crashes()
    k0 =get_k0(irrelevant_t)
    k1 =get_k0(irrelevant_t, k0)
    from Crypto.Cipher import AES
    key = bytes(k0+k1)
    ct = bytes.fromhex("2801dd800e7ae333258224d5cbfc5420ec72a12256bdff61814972c7f93948f8")
    aes = AES.new(key, AES.MODE_ECB)
    pt=aes.decrypt(ct)
    print(repr(pt))
